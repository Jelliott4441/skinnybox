#!/usr/bin/env python

"""

Example usage:

HOST_UUID=`xe host-list | awk -F': ' '{print $2}' | head -n 1`

xe host-call-plugin host-uuid=${HOST_UUID} plugin=skinnybox fn=provision \
   args:template=ubuntu-overlay-template \
   args:master=thin-overlay-00 \
   args:name=overlay-01

"""

import XenAPI

import XenAPIPlugin

def get_default_sr(session):
    """Returns the reference to the default SR"""
    pool = session.xenapi.pool.get_all()[0]
    default_sr = session.xenapi.pool.get_default_SR(pool)
    return default_sr


def get_source_template(session, name):
    """Verifies that the template is suitable for use in this plugin and returns its reference"""
    templates = session.xenapi.VM.get_by_name_label(name)

    if len(templates) == 0:
        raise "Template '%s' not found" % (name)
        
    if len(templates) > 1:
        raise "Multiple templates found by that name '%s'" % (name)
        
    template_rec = session.xenapi.VM.get_record(templates[0])
    
    if not template_rec["is_a_template"]:
        raise "'%s' is not a template" % (name)

    vbds = template_rec["VBDs"]
    
    for vbd in vbds:
        record = session.xenapi.VBD.get_record(vbd)
        
        if (record["userdevice"] == "0"):
            raise "Template '%s' must have an empty storage slot 0" % (name)

    # Return the template reference
    return templates[0]    
        
def get_master_boot_vbd(session, master):
    """Locates the master VM, verifies it's suitability and returns it's boot drive"""
    vm_refs = session.xenapi.VM.get_by_name_label(master)
    
    if len(vm_refs) == 0:
        raise "VM '%s' not found" % (master)
        
    if len(vm_refs) > 1:
        raise "Multiple VMs found by that name '%s'" % (master)
        
    vm_rec = session.xenapi.VM.get_record(vm_refs[0])
    
    if vm_rec["is_a_template"]:
        raise "'%s' is a template, should be a VM" % (master)
    
    vbds = vm_rec["VBDs"]
    
    for vbd in vbds:
        record = session.xenapi.VBD.get_record(vbd)
        if record["bootable"]:
            return vbd, record
    
    raise "Couldn't determine the bootable drive of %s" % (master)
    
    
def fix_boot_disk(session, vm):
    """Ensures that only the disk in slot 0 is marked as bootable"""
    
    vm_record = session.xenapi.VM.get_record(vm)
    vbds = vm_record["VBDs"]
    
    for vbd in vbds:
        record = session.xenapi.VBD.get_record(vbd)
        if (record["userdevice"] == "0") & (record["bootable"] == False):
            session.xenapi.VBD.set_bootable(vbd, True)
            
        if (record["userdevice"] != "0") & (record["bootable"] == True):
            session.xenapi.VBD.set_bootable(vbd, False)
 
def fix_vbi_names(session, vm):
    """Renames the VDBs to avoid confusion with the templates VBD"""
    
    vm_record = session.xenapi.VM.get_record(vm)
    vbds = vm_record["VBDs"]
    
    for vbd in vbds:
        record = session.xenapi.VBD.get_record(vbd)
        if (record["empty"] == False) & (record["type"] == "Disk"):
            vdi = record["VDI"]
            session.xenapi.VDI.set_name_label(vdi, vm_record["name_label"])   
    
def create_thin_vm(session, template, master, name):
    """Provision a new thin VM.
    
Parameters:
  template = name of the template to clone
  master = name of the VM from which to steal the boot drive
  name = the name to assign to the new VM and it's disks
  
Requirements:
* The template name passed must not have a boot drive attached. 
  Typically only a small ext2 drive in slot 1 is needed.
* The master vm must have a boot drive attached. This drive will 
  get attached to the new VM in slot 0 as a read only drive"""

    template = get_source_template(session, template)
    vm = session.xenapi.VM.clone(template, name)
    session.xenapi.VM.provision(vm)

    vm_uuid = session.xenapi.VM.get_record(vm)["uuid"]

    # Rename the VDIs that have been cloned
    fix_vbi_names(session, vm)

    # Assign the read only boot drive to the new VM using the master's VDI
    master_vbd, master_vbd_rec = get_master_boot_vbd(session, master)
    boot_vbd = {
        "VM": vm,
        "VDI": master_vbd_rec["VDI"],
        "userdevice": "0",
        "mode": "RO",
        "type": master_vbd_rec["type"],
        "bootable": True,
        "unpluggable": master_vbd_rec["unpluggable"],
        "empty": master_vbd_rec["empty"],
        "other_config": master_vbd_rec["other_config"],
        "qos_algorithm_type": master_vbd_rec["qos_algorithm_type"],
        "qos_algorithm_params": master_vbd_rec["qos_algorithm_params"]
    }
    session.xenapi.VBD.create(boot_vbd)
    
    # Fix the boot configuration
    fix_boot_disk(session, vm)

    return vm_uuid
    

def provision(session, args):

    if not args.has_key("template"):
        raise "Need the name of the template to clone. Please use the 'template' argument"
    template = args["template"]
    
    if not args.has_key("master"):
        raise "Need the name of the vm from which to borrow a boot drive. Please use the 'master' argument"
    master = args["master"]
    
    if not args.has_key("name"):
        raise "Need the name to assign to the new VM. Please use the 'name' argument"
    name = args["name"]
    
    #sr = get_default_sr(session)
    return create_thin_vm(session, template, master, name)


def create_template(session, args):

    if args.has_key("template_to_clone"):
        template_to_clone = args["template_to_clone"]
    else:
        template_to_clone="Ubuntu Precise Pangolin 12.04 (64-bit)"


    if args.has_key("new_template_name"):
        new_template_name = args["new_template_name"]
    else:
        new_template_name="Ubuntu 12.04 Skinny (64MB)"


    if args.has_key("overlay_size"):
        overlay_size = args["overlay_size"]
    else:
        overlay_size=67108864

    templates = session.xenapi.VM.get_by_name_label(template_to_clone)
    
    if len(templates) == 0:
        raise "Template '%s' not found" % (template_to_clone)
        
    if len(templates) > 1:
        raise "Multiple templates found by that name '%s'" % (template_to_clone)
        
    stock_ubuntu_template = templates[0]
    stock_ubuntu_template_rec = session.xenapi.VM.get_record(stock_ubuntu_template)

    #Create the overlay template
    my_overlay_template = session.xenapi.VM.clone(stock_ubuntu_template, new_template_name)
    my_overlay_template_rec = session.xenapi.VM.get_record(my_overlay_template)
    
    other_config = my_overlay_template_rec["other_config"]
    other_config["instant"] = "true"
    other_config["skinnybox"] = "true"
    del(other_config["install-distro"])
    del(other_config["disks"])
    
    session.xenapi.VM.set_other_config(my_overlay_template, other_config)
    session.xenapi.VM.set_PV_bootloader(my_overlay_template, "pygrub")
    session.xenapi.VM.set_PV_args(my_overlay_template, "-- console=hvc0 overlayroot=device:dev=/dev/xvdb,mkfs=1")
    session.xenapi.VM.set_name_description(my_overlay_template, "Template that's used for skinny provisioning of Ubuntu server VMs. Before installing this template please assign to it a network interface, customize the memory and CPU alocation to fit your need and increase the size of the overlay drive. To actually install, use the SkinnyBox XenCenter plugin or the CLI XenServer plugin. The overlay drive will be formatted automatically on the first boot.")

    #Add a DVD drive in the last slot
    dvd_drive_vbd = {
        "VM": my_overlay_template,
        "VDI": "",
        "userdevice": "15",
        "mode": "RO",
        "type": "CD",
        "bootable": False,
        "unpluggable": True,
        "empty": True,
        "other_config": {},
        "qos_algorithm_type": "",
        "qos_algorithm_params": {}
    }
    session.xenapi.VBD.create(dvd_drive_vbd)
    
    #Create a very small overlay VDI in slot 2 of the overlay template
    default_sr = get_default_sr(session)
    overlay_drive_vdi = {
        "SR": default_sr,
        "virtual_size": "%d" % overlay_size,
        "type": "user",
        "sharable": False,
        "read_only": False,
        "other_config": {},
        "name_label": "Overlay disk",
        "name_description": "Disk formatted with ext2 and mounted as an overlay on top of an existing root filesystem",
    }
    overlay_vdi = session.xenapi.VDI.create(overlay_drive_vdi)

    #Attach the VDI to the overlay template
    overlay_drive_vbd = {
        "VM": my_overlay_template,
        "VDI": overlay_vdi,
        "userdevice": "1",
        "mode": "RW",
        "type": "Disk",
        "bootable": False,
        "unpluggable": True,
        "empty": False,
        "other_config": {},
        "qos_algorithm_type": "",
        "qos_algorithm_params": {}
    }
    session.xenapi.VBD.create(overlay_drive_vbd)
    return my_overlay_template_rec["uuid"]


if __name__ == "__main__":
    XenAPIPlugin.dispatch({"provision": provision,
                           "create_template": create_template})
